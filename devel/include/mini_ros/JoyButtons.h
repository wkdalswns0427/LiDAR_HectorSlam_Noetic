// Generated by gencpp from file mini_ros/JoyButtons.msg
// DO NOT EDIT!


#ifndef MINI_ROS_MESSAGE_JOYBUTTONS_H
#define MINI_ROS_MESSAGE_JOYBUTTONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mini_ros
{
template <class ContainerAllocator>
struct JoyButtons_
{
  typedef JoyButtons_<ContainerAllocator> Type;

  JoyButtons_()
    : updown(0)
    , leftright(0)
    , left_bump(0)
    , right_bump(0)  {
    }
  JoyButtons_(const ContainerAllocator& _alloc)
    : updown(0)
    , leftright(0)
    , left_bump(0)
    , right_bump(0)  {
  (void)_alloc;
    }



   typedef int8_t _updown_type;
  _updown_type updown;

   typedef int8_t _leftright_type;
  _leftright_type leftright;

   typedef int8_t _left_bump_type;
  _left_bump_type left_bump;

   typedef int8_t _right_bump_type;
  _right_bump_type right_bump;





  typedef boost::shared_ptr< ::mini_ros::JoyButtons_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mini_ros::JoyButtons_<ContainerAllocator> const> ConstPtr;

}; // struct JoyButtons_

typedef ::mini_ros::JoyButtons_<std::allocator<void> > JoyButtons;

typedef boost::shared_ptr< ::mini_ros::JoyButtons > JoyButtonsPtr;
typedef boost::shared_ptr< ::mini_ros::JoyButtons const> JoyButtonsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mini_ros::JoyButtons_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mini_ros::JoyButtons_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mini_ros::JoyButtons_<ContainerAllocator1> & lhs, const ::mini_ros::JoyButtons_<ContainerAllocator2> & rhs)
{
  return lhs.updown == rhs.updown &&
    lhs.leftright == rhs.leftright &&
    lhs.left_bump == rhs.left_bump &&
    lhs.right_bump == rhs.right_bump;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mini_ros::JoyButtons_<ContainerAllocator1> & lhs, const ::mini_ros::JoyButtons_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mini_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mini_ros::JoyButtons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mini_ros::JoyButtons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_ros::JoyButtons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_ros::JoyButtons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_ros::JoyButtons_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_ros::JoyButtons_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mini_ros::JoyButtons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be1de48c3b52ec87587be0e78c2cb8cd";
  }

  static const char* value(const ::mini_ros::JoyButtons_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe1de48c3b52ec87ULL;
  static const uint64_t static_value2 = 0x587be0e78c2cb8cdULL;
};

template<class ContainerAllocator>
struct DataType< ::mini_ros::JoyButtons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mini_ros/JoyButtons";
  }

  static const char* value(const ::mini_ros::JoyButtons_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mini_ros::JoyButtons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 updown\n"
"int8 leftright\n"
"int8 left_bump\n"
"int8 right_bump\n"
;
  }

  static const char* value(const ::mini_ros::JoyButtons_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mini_ros::JoyButtons_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.updown);
      stream.next(m.leftright);
      stream.next(m.left_bump);
      stream.next(m.right_bump);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoyButtons_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mini_ros::JoyButtons_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mini_ros::JoyButtons_<ContainerAllocator>& v)
  {
    s << indent << "updown: ";
    Printer<int8_t>::stream(s, indent + "  ", v.updown);
    s << indent << "leftright: ";
    Printer<int8_t>::stream(s, indent + "  ", v.leftright);
    s << indent << "left_bump: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left_bump);
    s << indent << "right_bump: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right_bump);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINI_ROS_MESSAGE_JOYBUTTONS_H
