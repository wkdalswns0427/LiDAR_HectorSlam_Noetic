// Generated by gencpp from file mini_ros/JointAngles.msg
// DO NOT EDIT!


#ifndef MINI_ROS_MESSAGE_JOINTANGLES_H
#define MINI_ROS_MESSAGE_JOINTANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mini_ros
{
template <class ContainerAllocator>
struct JointAngles_
{
  typedef JointAngles_<ContainerAllocator> Type;

  JointAngles_()
    : fls(0.0)
    , fle(0.0)
    , flw(0.0)
    , frs(0.0)
    , fre(0.0)
    , frw(0.0)
    , bls(0.0)
    , ble(0.0)
    , blw(0.0)
    , brs(0.0)
    , bre(0.0)
    , brw(0.0)
    , step_or_view(false)  {
    }
  JointAngles_(const ContainerAllocator& _alloc)
    : fls(0.0)
    , fle(0.0)
    , flw(0.0)
    , frs(0.0)
    , fre(0.0)
    , frw(0.0)
    , bls(0.0)
    , ble(0.0)
    , blw(0.0)
    , brs(0.0)
    , bre(0.0)
    , brw(0.0)
    , step_or_view(false)  {
  (void)_alloc;
    }



   typedef float _fls_type;
  _fls_type fls;

   typedef float _fle_type;
  _fle_type fle;

   typedef float _flw_type;
  _flw_type flw;

   typedef float _frs_type;
  _frs_type frs;

   typedef float _fre_type;
  _fre_type fre;

   typedef float _frw_type;
  _frw_type frw;

   typedef float _bls_type;
  _bls_type bls;

   typedef float _ble_type;
  _ble_type ble;

   typedef float _blw_type;
  _blw_type blw;

   typedef float _brs_type;
  _brs_type brs;

   typedef float _bre_type;
  _bre_type bre;

   typedef float _brw_type;
  _brw_type brw;

   typedef uint8_t _step_or_view_type;
  _step_or_view_type step_or_view;





  typedef boost::shared_ptr< ::mini_ros::JointAngles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mini_ros::JointAngles_<ContainerAllocator> const> ConstPtr;

}; // struct JointAngles_

typedef ::mini_ros::JointAngles_<std::allocator<void> > JointAngles;

typedef boost::shared_ptr< ::mini_ros::JointAngles > JointAnglesPtr;
typedef boost::shared_ptr< ::mini_ros::JointAngles const> JointAnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mini_ros::JointAngles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mini_ros::JointAngles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mini_ros::JointAngles_<ContainerAllocator1> & lhs, const ::mini_ros::JointAngles_<ContainerAllocator2> & rhs)
{
  return lhs.fls == rhs.fls &&
    lhs.fle == rhs.fle &&
    lhs.flw == rhs.flw &&
    lhs.frs == rhs.frs &&
    lhs.fre == rhs.fre &&
    lhs.frw == rhs.frw &&
    lhs.bls == rhs.bls &&
    lhs.ble == rhs.ble &&
    lhs.blw == rhs.blw &&
    lhs.brs == rhs.brs &&
    lhs.bre == rhs.bre &&
    lhs.brw == rhs.brw &&
    lhs.step_or_view == rhs.step_or_view;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mini_ros::JointAngles_<ContainerAllocator1> & lhs, const ::mini_ros::JointAngles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mini_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mini_ros::JointAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mini_ros::JointAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_ros::JointAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_ros::JointAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_ros::JointAngles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_ros::JointAngles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mini_ros::JointAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54bfcd55046a61d9df3827d322506389";
  }

  static const char* value(const ::mini_ros::JointAngles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54bfcd55046a61d9ULL;
  static const uint64_t static_value2 = 0xdf3827d322506389ULL;
};

template<class ContainerAllocator>
struct DataType< ::mini_ros::JointAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mini_ros/JointAngles";
  }

  static const char* value(const ::mini_ros::JointAngles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mini_ros::JointAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# FL\n"
"# Shoulder or x\n"
"float32 fls\n"
"# Elbow or y\n"
"float32 fle\n"
"# Wrist or z\n"
"float32 flw\n"
"\n"
"# FR\n"
"# Shoulder or x\n"
"float32 frs\n"
"# Elbow or y\n"
"float32 fre\n"
"# Wrist or z\n"
"float32 frw\n"
"\n"
"# BL\n"
"# Shoulder or x\n"
"float32 bls\n"
"# Elbow or y\n"
"float32 ble\n"
"# Wrist or z\n"
"float32 blw\n"
"\n"
"# BR\n"
"# Shoulder or x\n"
"float32 brs\n"
"# Elbow or y\n"
"float32 bre\n"
"# Wrist or z\n"
"float32 brw\n"
"\n"
"# Move Type (for servo smoothness)\n"
"# step is 0\n"
"# view is 1\n"
"bool step_or_view\n"
;
  }

  static const char* value(const ::mini_ros::JointAngles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mini_ros::JointAngles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fls);
      stream.next(m.fle);
      stream.next(m.flw);
      stream.next(m.frs);
      stream.next(m.fre);
      stream.next(m.frw);
      stream.next(m.bls);
      stream.next(m.ble);
      stream.next(m.blw);
      stream.next(m.brs);
      stream.next(m.bre);
      stream.next(m.brw);
      stream.next(m.step_or_view);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointAngles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mini_ros::JointAngles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mini_ros::JointAngles_<ContainerAllocator>& v)
  {
    s << indent << "fls: ";
    Printer<float>::stream(s, indent + "  ", v.fls);
    s << indent << "fle: ";
    Printer<float>::stream(s, indent + "  ", v.fle);
    s << indent << "flw: ";
    Printer<float>::stream(s, indent + "  ", v.flw);
    s << indent << "frs: ";
    Printer<float>::stream(s, indent + "  ", v.frs);
    s << indent << "fre: ";
    Printer<float>::stream(s, indent + "  ", v.fre);
    s << indent << "frw: ";
    Printer<float>::stream(s, indent + "  ", v.frw);
    s << indent << "bls: ";
    Printer<float>::stream(s, indent + "  ", v.bls);
    s << indent << "ble: ";
    Printer<float>::stream(s, indent + "  ", v.ble);
    s << indent << "blw: ";
    Printer<float>::stream(s, indent + "  ", v.blw);
    s << indent << "brs: ";
    Printer<float>::stream(s, indent + "  ", v.brs);
    s << indent << "bre: ";
    Printer<float>::stream(s, indent + "  ", v.bre);
    s << indent << "brw: ";
    Printer<float>::stream(s, indent + "  ", v.brw);
    s << indent << "step_or_view: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.step_or_view);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINI_ROS_MESSAGE_JOINTANGLES_H
