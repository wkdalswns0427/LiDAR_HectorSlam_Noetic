// Generated by gencpp from file mini_ros/CalibServoRequest.msg
// DO NOT EDIT!


#ifndef MINI_ROS_MESSAGE_CALIBSERVOREQUEST_H
#define MINI_ROS_MESSAGE_CALIBSERVOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mini_ros
{
template <class ContainerAllocator>
struct CalibServoRequest_
{
  typedef CalibServoRequest_<ContainerAllocator> Type;

  CalibServoRequest_()
    : servo_num(0)
    , servo_pulse(0)  {
    }
  CalibServoRequest_(const ContainerAllocator& _alloc)
    : servo_num(0)
    , servo_pulse(0)  {
  (void)_alloc;
    }



   typedef int8_t _servo_num_type;
  _servo_num_type servo_num;

   typedef int32_t _servo_pulse_type;
  _servo_pulse_type servo_pulse;





  typedef boost::shared_ptr< ::mini_ros::CalibServoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mini_ros::CalibServoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CalibServoRequest_

typedef ::mini_ros::CalibServoRequest_<std::allocator<void> > CalibServoRequest;

typedef boost::shared_ptr< ::mini_ros::CalibServoRequest > CalibServoRequestPtr;
typedef boost::shared_ptr< ::mini_ros::CalibServoRequest const> CalibServoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mini_ros::CalibServoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mini_ros::CalibServoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mini_ros::CalibServoRequest_<ContainerAllocator1> & lhs, const ::mini_ros::CalibServoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.servo_num == rhs.servo_num &&
    lhs.servo_pulse == rhs.servo_pulse;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mini_ros::CalibServoRequest_<ContainerAllocator1> & lhs, const ::mini_ros::CalibServoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mini_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mini_ros::CalibServoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mini_ros::CalibServoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_ros::CalibServoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_ros::CalibServoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_ros::CalibServoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_ros::CalibServoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mini_ros::CalibServoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "372c64510294fc8eec78b728b048d2c9";
  }

  static const char* value(const ::mini_ros::CalibServoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x372c64510294fc8eULL;
  static const uint64_t static_value2 = 0xec78b728b048d2c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::mini_ros::CalibServoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mini_ros/CalibServoRequest";
  }

  static const char* value(const ::mini_ros::CalibServoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mini_ros::CalibServoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request\n"
"int8 servo_num\n"
"int32 servo_pulse\n"
;
  }

  static const char* value(const ::mini_ros::CalibServoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mini_ros::CalibServoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_num);
      stream.next(m.servo_pulse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalibServoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mini_ros::CalibServoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mini_ros::CalibServoRequest_<ContainerAllocator>& v)
  {
    s << indent << "servo_num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.servo_num);
    s << indent << "servo_pulse: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo_pulse);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINI_ROS_MESSAGE_CALIBSERVOREQUEST_H
