// Generated by gencpp from file mini_ros/MiniCmd.msg
// DO NOT EDIT!


#ifndef MINI_ROS_MESSAGE_MINICMD_H
#define MINI_ROS_MESSAGE_MINICMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mini_ros
{
template <class ContainerAllocator>
struct MiniCmd_
{
  typedef MiniCmd_<ContainerAllocator> Type;

  MiniCmd_()
    : motion()
    , movement()
    , x_velocity(0.0)
    , y_velocity(0.0)
    , rate(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , z(0.0)
    , faster(0.0)
    , slower(0.0)  {
    }
  MiniCmd_(const ContainerAllocator& _alloc)
    : motion(_alloc)
    , movement(_alloc)
    , x_velocity(0.0)
    , y_velocity(0.0)
    , rate(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , z(0.0)
    , faster(0.0)
    , slower(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motion_type;
  _motion_type motion;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _movement_type;
  _movement_type movement;

   typedef float _x_velocity_type;
  _x_velocity_type x_velocity;

   typedef float _y_velocity_type;
  _y_velocity_type y_velocity;

   typedef float _rate_type;
  _rate_type rate;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _z_type;
  _z_type z;

   typedef float _faster_type;
  _faster_type faster;

   typedef float _slower_type;
  _slower_type slower;





  typedef boost::shared_ptr< ::mini_ros::MiniCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mini_ros::MiniCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MiniCmd_

typedef ::mini_ros::MiniCmd_<std::allocator<void> > MiniCmd;

typedef boost::shared_ptr< ::mini_ros::MiniCmd > MiniCmdPtr;
typedef boost::shared_ptr< ::mini_ros::MiniCmd const> MiniCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mini_ros::MiniCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mini_ros::MiniCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mini_ros::MiniCmd_<ContainerAllocator1> & lhs, const ::mini_ros::MiniCmd_<ContainerAllocator2> & rhs)
{
  return lhs.motion == rhs.motion &&
    lhs.movement == rhs.movement &&
    lhs.x_velocity == rhs.x_velocity &&
    lhs.y_velocity == rhs.y_velocity &&
    lhs.rate == rhs.rate &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.z == rhs.z &&
    lhs.faster == rhs.faster &&
    lhs.slower == rhs.slower;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mini_ros::MiniCmd_<ContainerAllocator1> & lhs, const ::mini_ros::MiniCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mini_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mini_ros::MiniCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mini_ros::MiniCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_ros::MiniCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_ros::MiniCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_ros::MiniCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_ros::MiniCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mini_ros::MiniCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83510b9a5f454bd3ceb898b52e349406";
  }

  static const char* value(const ::mini_ros::MiniCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83510b9a5f454bd3ULL;
  static const uint64_t static_value2 = 0xceb898b52e349406ULL;
};

template<class ContainerAllocator>
struct DataType< ::mini_ros::MiniCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mini_ros/MiniCmd";
  }

  static const char* value(const ::mini_ros::MiniCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mini_ros::MiniCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# motion type: Go, Stop\n"
"string motion\n"
"\n"
"# movement type: Stepping, Viewing\n"
"string movement\n"
"\n"
"# linear velocity\n"
"float32 x_velocity\n"
"float32 y_velocity\n"
"\n"
"# angular rate\n"
"float32 rate\n"
"\n"
"# viewing params\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
"# robot height\n"
"float32 z\n"
"\n"
"# Step adjust\n"
"float32 faster\n"
"float32 slower\n"
;
  }

  static const char* value(const ::mini_ros::MiniCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mini_ros::MiniCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion);
      stream.next(m.movement);
      stream.next(m.x_velocity);
      stream.next(m.y_velocity);
      stream.next(m.rate);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.z);
      stream.next(m.faster);
      stream.next(m.slower);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MiniCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mini_ros::MiniCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mini_ros::MiniCmd_<ContainerAllocator>& v)
  {
    s << indent << "motion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motion);
    s << indent << "movement: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.movement);
    s << indent << "x_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.x_velocity);
    s << indent << "y_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.y_velocity);
    s << indent << "rate: ";
    Printer<float>::stream(s, indent + "  ", v.rate);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "faster: ";
    Printer<float>::stream(s, indent + "  ", v.faster);
    s << indent << "slower: ";
    Printer<float>::stream(s, indent + "  ", v.slower);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINI_ROS_MESSAGE_MINICMD_H
