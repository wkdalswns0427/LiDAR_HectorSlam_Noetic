# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mini_ros/JointAngles.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointAngles(genpy.Message):
  _md5sum = "54bfcd55046a61d9df3827d322506389"
  _type = "mini_ros/JointAngles"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# FL
# Shoulder or x
float32 fls
# Elbow or y
float32 fle
# Wrist or z
float32 flw

# FR
# Shoulder or x
float32 frs
# Elbow or y
float32 fre
# Wrist or z
float32 frw

# BL
# Shoulder or x
float32 bls
# Elbow or y
float32 ble
# Wrist or z
float32 blw

# BR
# Shoulder or x
float32 brs
# Elbow or y
float32 bre
# Wrist or z
float32 brw

# Move Type (for servo smoothness)
# step is 0
# view is 1
bool step_or_view"""
  __slots__ = ['fls','fle','flw','frs','fre','frw','bls','ble','blw','brs','bre','brw','step_or_view']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fls,fle,flw,frs,fre,frw,bls,ble,blw,brs,bre,brw,step_or_view

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointAngles, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fls is None:
        self.fls = 0.
      if self.fle is None:
        self.fle = 0.
      if self.flw is None:
        self.flw = 0.
      if self.frs is None:
        self.frs = 0.
      if self.fre is None:
        self.fre = 0.
      if self.frw is None:
        self.frw = 0.
      if self.bls is None:
        self.bls = 0.
      if self.ble is None:
        self.ble = 0.
      if self.blw is None:
        self.blw = 0.
      if self.brs is None:
        self.brs = 0.
      if self.bre is None:
        self.bre = 0.
      if self.brw is None:
        self.brw = 0.
      if self.step_or_view is None:
        self.step_or_view = False
    else:
      self.fls = 0.
      self.fle = 0.
      self.flw = 0.
      self.frs = 0.
      self.fre = 0.
      self.frw = 0.
      self.bls = 0.
      self.ble = 0.
      self.blw = 0.
      self.brs = 0.
      self.bre = 0.
      self.brw = 0.
      self.step_or_view = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12fB().pack(_x.fls, _x.fle, _x.flw, _x.frs, _x.fre, _x.frw, _x.bls, _x.ble, _x.blw, _x.brs, _x.bre, _x.brw, _x.step_or_view))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.fls, _x.fle, _x.flw, _x.frs, _x.fre, _x.frw, _x.bls, _x.ble, _x.blw, _x.brs, _x.bre, _x.brw, _x.step_or_view,) = _get_struct_12fB().unpack(str[start:end])
      self.step_or_view = bool(self.step_or_view)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12fB().pack(_x.fls, _x.fle, _x.flw, _x.frs, _x.fre, _x.frw, _x.bls, _x.ble, _x.blw, _x.brs, _x.bre, _x.brw, _x.step_or_view))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.fls, _x.fle, _x.flw, _x.frs, _x.fre, _x.frw, _x.bls, _x.ble, _x.blw, _x.brs, _x.bre, _x.brw, _x.step_or_view,) = _get_struct_12fB().unpack(str[start:end])
      self.step_or_view = bool(self.step_or_view)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12fB = None
def _get_struct_12fB():
    global _struct_12fB
    if _struct_12fB is None:
        _struct_12fB = struct.Struct("<12fB")
    return _struct_12fB
